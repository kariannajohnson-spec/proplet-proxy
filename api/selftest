export default async function handler(req, res) {
  try {
    const baseId = process.env.AIRTABLE_BASE_ID;
    const token = process.env.AIRTABLE_PAT;
    const table = process.env.AIRTABLE_PROPERTIES_TABLE || "Properties";
    const view = process.env.AIRTABLE_PROPERTIES_VIEW || "";

    if (!baseId || !token) {
      return res.status(400).json({ error: "Missing AIRTABLE_BASE_ID or AIRTABLE_PAT" });
    }

    const url = new URL(`https://api.airtable.com/v0/${baseId}/${encodeURIComponent(table)}`);
    url.searchParams.set("maxRecords", "1");
    if (view) url.searchParams.set("view", view);

    const r = await fetch(url.toString(), { headers: { Authorization: `Bearer ${token}` } });
    const text = await r.text();

    // Donâ€™t echo secrets; just status & hints.
    return res.status(r.status).json({
      status: r.status,
      ok: r.ok,
      note: "This hits your base/table directly. If NOT_FOUND, table or base access is wrong.",
      tableTried: table,
      viewTried: view || "(none)",
      baseIdStartsWith: baseId?.slice(0, 5),
      responseBodyPreview: text.slice(0, 200)
    });
  } catch (e) {
    console.error(e);
    return res.status(500).json({ error: "Selftest server error" });
  }
}
